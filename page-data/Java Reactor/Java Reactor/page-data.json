{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java Reactor/Java Reactor/","webpackCompilationHash":"a5d45442564f0988a3dd","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"55d617ac-b9ce-5b57-a07c-1f37561ca4d6","excerpt":"一、Java Reactor基本method介紹: reactor是java library對於 reactive programming的實現，關注在資料流的傳遞與變化。 Java裡幾個有名的reactive library: RxJava/RxJava2/Reactor Spring5的Spring webflux…","html":"<h2>一、Java Reactor基本method介紹:</h2>\n<p>reactor是java library對於 reactive programming的實現，關注在資料流的傳遞與變化。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">比如求值一个简单的表达式 c=a+b，当 a 或者 b 的值发生变化时，传统的编程范式需要对 a+b 进行重新计算来得到 c 的值。如果使用反应式编程，当 a 或者 b 的值发生变化时，c 的值会自动更新。</code></pre></div>\n<p>Java裡幾個有名的reactive library: RxJava/RxJava2/Reactor</p>\n<p>Spring5的Spring webflux是基於reactor實現web應用的框架。</p>\n<h2>二、Return值的mono &#x26; flux</h2>\n<p>flux是一種訂閱者模式，表示的是包含 0 到 N 个元素的异步序列，可以包含三种不同类型的消息通知：正常的包含元素的消息、序列结束的消息和序列出错的消息。当消息通知产生时，订阅者中对应的方法 onNext(), onComplete()和 onError()会被调用。</p>\n<p>mono也是訂閱者模式，表示的是包含 0 或者 1 个元素的异步序列，flux與mono之間可以進行轉換，像是List<Object>與Object之間的關係。</p>\n<h2>三、建立Flux</h2>\n<p>靜態生成:從一個固定的集合中產生flux</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>動態生成: generate()方法</p>\n<p>參考資料:</p>\n<p><a href=\"https://www.twblogs.net/a/5d733708bd9eee541c3415d5\">從響應式編程談到”好萊塢”</a></p>\n<p><a href=\"https://www.itread01.com/content/1553169850.html\">異步編程與多線程編程的聯系和區別</a></p>\n<p><a href=\"https://blog.51cto.com/liukang/2094073\">Reactor 3 之选择合适的操作符——响应式Spring的道法术器</a></p>\n<p><a href=\"https://blog.51cto.com/liukang/2090163\">响应式Spring的道法术器（Spring WebFlux 快速上手 + 全面介绍）</a></p>","frontmatter":{"title":"Java Reactor介紹","date":"October 03, 2019","description":"介紹Java的reative programming的實作庫:Reactor"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Java Reactor/Java Reactor/","previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":{"fields":{"slug":"/Spring webflux/Spring webflux/"},"frontmatter":{"title":"Spring webflux"}}}}}